koi-auction-system
│
├── src/main/java/com/koi/auction
│   ├── controllers          // Các controller REST để quản lý tương tác người dùng
│   ├── services             // Xử lý logic nghiệp vụ
│   ├── repositories         // Tương tác với cơ sở dữ liệu (JPA)
│   ├── models               // Các lớp thực thể (Koi, Auction, User, Farm, v.v.)
│   ├── dto                  // Các lớp DTO (Data Transfer Objects)
│   ├── config               // Cấu hình (bảo mật, email, cổng thanh toán)
│   └── exceptions           // Xử lý ngoại lệ tùy chỉnh
│
├── src/main/resources
│   ├── templates            // Các mẫu Thymeleaf cho frontend (HTML)
│   ├── static               // CSS, JS, hình ảnh
│   └── application.yml      // Cấu hình cơ sở dữ liệu, email, cổng thanh toán, v.v.
│
├── pom.xml                  // Các dependencies của dự án
└── README.md



2. Thiết Kế Cơ Sở Dữ Liệu (MySQL).

Các bảng cơ bản:
	- User (user_id, username, password, role, contact_info)
	- Farm (farm_id, name, location, user_id (chủ trang trại))
	- Koi (koi_id, size, color, health, price, farm_id)
	- Auction (auction_id, koi_id, start_price, auction_type, start_time, end_time, status)
	- Bid (bid_id, auction_id, user_id, bid_amount, bid_time)
	- Transaction (transaction_id, auction_id, buyer_id, seller_id, amount, status).
	- Blog (blog_id, title, content, date, author)
	
3. Frontend (HTML, CSS, JS)
	- Sử dụng Thymeleaf templates để hiển thị dữ liệu động (danh sách đấu giá, chi tiết cá koi).
	- Sử dụng AJAX để cập nhật trạng thái đấu giá và giá thầu theo thời gian thực.
	- Dùng framework CSS như Bootstrap để giao diện responsive.
	
4. Backend (Spring Boot) https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.3.4&packaging=jar&jvmVersion=23&groupId=com.example&artifactId=koi%20fish%20auction&name=Koi%20Fish%20Auction&description=Koi%20fish%20auction%20program&packageName=com.example.koi%20fish%20auction&dependencies=web,data-jpa,mysql,thymeleaf,security,devtools,h2
	4.1. Controllers
		Tạo các REST API cho từng module chính (User, Auction, Koi, Farm):
			+ UserController để đăng ký, đăng nhập, quản lý hồ sơ người dùng		.	
			+ AuctionController để hiển thị danh sách đấu giá, đặt giá, và quy trình đấu giá.
			+ FarmController để quản lý trang trại và yêu cầu đấu giá.
			+ PaymentController để xử lý thanh toán qua cổng thanh toán.
	4.2. Services
			+ AuctionService để xử lý logic đấu giá (đặt giá, tính toán người chiến thắng).
			+ NotificationService để gửi thông báo qua email hoặc thời gian thực.
			+ PaymentService để xử lý thanh toán và tương tác với cổng thanh toán.
4.3. Repositories
	+ Sử dụng Spring Data JPA để tương tác với cơ sở dữ liệu MySQL.


5. Triển Khai Các Phương Thức Đấu Giá
Triển khai logic đấu giá trong AuctionService:
	- Đối với giá cố định, kiểm tra nếu có nhiều người mua và xử lý chọn ngẫu nhiên.
 	- Đối với đấu giá kín, thu thập các giá thầu và thông báo giá thầu cao nhất khi kết thúc.
	- Đối với đấu giá lên/xuống, theo dõi giá thầu theo thời gian thực và cập nhật giá thầu cao/thấp nhất.
	
6. Trạng Thái Đấu Giá Thời Gian Thực
	Sử dụng WebSocket hoặc Server-Sent Events (SSE) để gửi các cập nhật theo thời gian thực cho người mua trong quá trình đấu giá.

7. Email & Thông Báo
	+ Sử dụng Spring Email để gửi thông báo tới người dùng về các sự kiện quan trọng (kết quả đấu giá, thanh toán).
	+ Đối với thông báo thời gian thực, bạn có thể tích hợp WebSocket cho tin nhắn trong ứng dụng.
	
8. Cổng Thanh Toán
	- Tích hợp cổng thanh toán như Stripe hoặc PayPal sử dụng SDK của họ.
	- Xử lý quy trình thanh toán và liên kết với quy trình đấu giá.
	
9. Bảo Mật ( không có cũng được)
	- Sử dụng Spring Security để xác thực người dùng và quản lý quyền truy cập theo vai trò (người mua, chủ trang trại, quản trị viên).
	
10. Dashboard
Tạo dashboard cho admin sử dụng Thymeleaf để thống kê:

  - Số lượng đấu giá, tổng doanh thu, sự tham gia của người mua, doanh thu.